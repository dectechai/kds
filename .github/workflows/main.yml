name: Windows 10 RDP with ngrok

on:
  workflow_dispatch:
    inputs:
      rdp_username:
        description: 'RDP Username (optional)'
        required: false
        default: 'runneradmin'
        type: string
      rdp_password:
        description: 'RDP Password (optional)'
        required: false
        default: 'P@ssw0rd123!'
        type: string

jobs:
  setup-windows-rdp:
    runs-on: windows-latest
    timeout-minutes: 360

    steps:
    - name: Enable RDP
      run: |
        Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server' -Name "fDenyTSConnections" -Value 0
        Enable-NetFirewallRule -DisplayGroup "Remote Desktop"
        Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -Name "UserAuthentication" -Value 1
        Write-Host "‚úÖ RDP has been enabled"
      shell: powershell

    - name: Create RDP User
      run: |
        $username = "${{ github.event.inputs.rdp_username }}"
        $password = "${{ github.event.inputs.rdp_password }}"
        try {
          Get-LocalUser -Name $username -ErrorAction Stop
          Write-Host "User $username already exists"
        } catch {
          $securePassword = ConvertTo-SecureString $password -AsPlainText -Force
          New-LocalUser -Name $username -Password $securePassword -FullName "RDP User" -Description "User for RDP access"
          Write-Host "‚úÖ Created user: $username"
        }
        Add-LocalGroupMember -Group "Remote Desktop Users" -Member $username -ErrorAction SilentlyContinue
        Add-LocalGroupMember -Group "Administrators" -Member $username -ErrorAction SilentlyContinue
        Write-Host "‚úÖ User $username has been configured"
      shell: powershell

    - name: Download and Install ngrok
      run: |
        $ngrokUrl = "https://bin.equinox.io/c/bNyj1mQVY4c/ngrok-v3-stable-windows-amd64.zip"
        $ngrokZip = "$env:TEMP\ngrok.zip"
        $ngrokDir = "$env:TEMP\ngrok"
        Invoke-WebRequest -Uri $ngrokUrl -OutFile $ngrokZip
        Expand-Archive -Path $ngrokZip -DestinationPath $ngrokDir -Force
        New-Item -ItemType Directory -Path "C:\ngrok" -Force
        Copy-Item "$ngrokDir\ngrok.exe" -Destination "C:\ngrok\ngrok.exe"
        $env:PATH += ";C:\ngrok"
        [Environment]::SetEnvironmentVariable("PATH", $env:PATH, [EnvironmentVariableTarget]::Machine)
        Write-Host "‚úÖ ngrok installed"
      shell: powershell

    - name: Configure ngrok
      run: |
        C:\ngrok\ngrok.exe config add-authtoken 2zJA7O7OMu7kjdBroaU9YktZK7P_38UpMAmtEJuext6ymq9Qa
        Write-Host "‚úÖ ngrok authtoken set"
      shell: powershell

    - name: Start ngrok Tunnel and Output RDP Info
      run: |
        Start-Process -FilePath "C:\ngrok\ngrok.exe" -ArgumentList "tcp", "3389" -WindowStyle Hidden
        Start-Sleep -Seconds 10

        try {
          $ngrokApi = Invoke-RestMethod -Uri "http://localhost:4040/api/tunnels"
          $tunnel = $ngrokApi.tunnels | Where-Object { $_.proto -eq "tcp" }

          if ($tunnel) {
            $host = $tunnel.public_url -replace "tcp://", ""
            $parts = $host -split ":"
            $ngrokHost = $parts[0]
            $ngrokPort = $parts[1]
            Write-Host "============================================"
            Write-Host "üéâ Windows 10 RDP is now accessible!"
            Write-Host "RDP Host: $ngrokHost"
            Write-Host "RDP Port: $ngrokPort"
            Write-Host "Username: ${{ github.event.inputs.rdp_username }}"
            Write-Host "Password: ${{ github.event.inputs.rdp_password }}"
            Write-Host "============================================"
            "RDP Details:`nHost: $ngrokHost`nPort: $ngrokPort`nUsername: ${{ github.event.inputs.rdp_username }}`nPassword: ${{ github.event.inputs.rdp_password }}" | Out-File -FilePath rdp_connection_info.txt -Encoding UTF8
          } else {
            Write-Host "‚ùå ngrok tunnel not found"
            exit 1
          }
        } catch {
          Write-Host "‚ùå Error: $_"
          exit 1
        }
      shell: powershell

    - name: Keep Session Alive (6h)
      run: |
        $end = (Get-Date).AddHours(6)
        while ((Get-Date) -lt $end) {
          Write-Host "üíì Session alive - $(Get-Date)"
          Start-Sleep -Seconds 300
        }
        Write-Host "‚è∞ 6 hour session ended"
      shell: powershell

    - name: Upload RDP Info
      uses: actions/upload-artifact@v4
      with:
        name: rdp-connection-info
        path: rdp_connection_info.txt
        retention-days: 1
